
  /*******************************************************************
  * MerchantServices.java
  * Generated by Backendless Corp.
  ********************************************************************/
		
package in.myecash.merchantbase.backendAPI;

import com.backendless.Backendless;
import com.backendless.async.callback.AsyncCallback;
import in.myecash.commonbase.constants.BackendSettings;
import in.myecash.commonbase.models.Cashback;
import in.myecash.commonbase.models.MerchantStats;
import in.myecash.commonbase.models.Merchants;

  public class MerchantServices
{
    static final String SERVICE_NAME = "MerchantServices";
    static final String SERVICE_VERSION_NAME = "1.0.0";
    static final String APP_VERSION = "v1";

    private static MerchantServices ourInstance = new MerchantServices();

    private MerchantServices(  )
    {
    }

    public static MerchantServices getInstance()
    {
        return ourInstance;
    }

    public static void initApplication()
    {
        Backendless.setUrl( BackendSettings.BACKENDLESS_HOST );
        // if you invoke this sample inside of android application, you should use overloaded "initApp" with "context" argument
        Backendless.initApp( BackendSettings.APPLICATION_ID, BackendSettings.ANDROID_SECRET_KEY, MerchantServices.APP_VERSION );
    }

    public Merchants deleteTrustedDevice(String deviceId)
    {
        Object[] args = new Object[]{deviceId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "changeMobile", args, Merchants.class );
    }

    public Merchants changeMobile(String currentMobile, String newMobile, String otp)
    {
        Object[] args = new Object[]{currentMobile, newMobile, otp};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "changeMobile", args, Merchants.class );
    }

    public Merchants updateSettings(String cbRate, boolean addClEnabled, String email)
    {
        Object[] args = new Object[]{cbRate, addClEnabled, email};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "updateSettings", args, Merchants.class );
    }

    public MerchantStats getMerchantStats(String merchantId)
    {
        Object[] args = new Object[]{merchantId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMerchantStats", args, MerchantStats.class );
    }

    public void archiveTxns()
    {
        Object[] args = new Object[]{};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "archiveTxns", args );
    }

    public void archiveTxnsAsync(AsyncCallback<Object> callback)
    {
        Object[] args = new Object[]{};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "archiveTxns", args, Object.class, callback);
    }

    public Cashback registerCustomer(String customerMobile, String name, String cardId)
    {
        Object[] args = new Object[]{customerMobile, name, cardId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "registerCustomer", args, Cashback.class );
    }

    public void registerCustomerAsync(String customerMobile, String name, String cardId, AsyncCallback<Cashback> callback)
    {
        Object[] args = new Object[]{customerMobile, name, cardId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "registerCustomer", args, Cashback.class, callback);
    }

    public void execCustomerOp(String opCode, String customerId, String scannedCardId, String otp, String pin, String opParam)
    {
        Object[] args = new Object[]{opCode, customerId, scannedCardId, otp, pin, opParam};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "execCustomerOp", args );
    }

    public void execCustomerOpAsync(String opCode, String customerId, String scannedCardId, String otp, String pin, String opParam, AsyncCallback<Object> callback)
    {
        Object[] args = new Object[]{opCode, customerId, scannedCardId, otp, pin, opParam};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "execCustomerOp", args, Object.class, callback);
    }

    public Cashback getCashback(String merchantId, String merchantCbTable, String customerId, boolean debugLogs)
    {
        Object[] args = new Object[]{merchantId, merchantCbTable, customerId, debugLogs};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getCashback", args, Cashback.class );
    }

    public void getCashbackAsync(String merchantId, String merchantCbTable, String customerId, AsyncCallback<Cashback> callback)
    {
        Object[] args = new Object[]{merchantId, merchantCbTable, customerId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getCashback", args, Cashback.class, callback);
    }
}

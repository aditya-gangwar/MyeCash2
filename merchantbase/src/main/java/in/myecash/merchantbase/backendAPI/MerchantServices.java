
  /*******************************************************************
  * MerchantServices.java
  * Generated by Backendless Corp.
  ********************************************************************/
		
package in.myecash.merchantbase.backendAPI;

import com.backendless.Backendless;
import com.backendless.async.callback.AsyncCallback;


import in.myecash.common.constants.CommonConstants;
import in.myecash.common.database.Cashback;
import in.myecash.common.database.MerchantOps;
import in.myecash.common.database.MerchantStats;
import in.myecash.common.database.Merchants;
import in.myecash.common.database.Transaction;

  public class MerchantServices
{
    static final String SERVICE_NAME = "MerchantServices";
    static final String SERVICE_VERSION_NAME = "1.0.0";
    static final String APP_VERSION = "v1";

    private static MerchantServices ourInstance = new MerchantServices();

    private MerchantServices(  )
    {
    }

    public static MerchantServices getInstance()
    {
        return ourInstance;
    }

    public static void initApplication()
    {
        Backendless.setUrl( CommonConstants.BACKENDLESS_HOST );
        // if you invoke this sample inside of android application, you should use overloaded "initApp" with "context" argument
        Backendless.initApp( CommonConstants.APPLICATION_ID, CommonConstants.ANDROID_SECRET_KEY, MerchantServices.APP_VERSION );
    }

    public Merchants changeMobile(java.lang.String verifyparam, java.lang.String newMobile, java.lang.String otp)
    {
        Object[] args = new Object[]{verifyparam, newMobile, otp};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "changeMobile", args, Merchants.class );
    }

    public void changeMobileAsync(java.lang.String currentMobile, java.lang.String newMobile, java.lang.String otp, AsyncCallback<Merchants> callback)
    {
        Object[] args = new Object[]{currentMobile, newMobile, otp};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "changeMobile", args, Merchants.class, callback);
    }

    public Merchants updateSettings(java.lang.String cbRate, boolean addClEnabled, java.lang.String email,
                                    boolean askLinkedInvNum, boolean linkedInvNumOptional, boolean invNumOnlyNmbrs)
    {
        Object[] args = new Object[]{cbRate, addClEnabled, email, askLinkedInvNum, linkedInvNumOptional, invNumOnlyNmbrs};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "updateSettings", args, Merchants.class );
    }

    public void updateSettingsAsync(java.lang.String cbRate, boolean addClEnabled, java.lang.String email, AsyncCallback<Merchants> callback)
    {
        Object[] args = new Object[]{cbRate, addClEnabled, email};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "updateSettings", args, Merchants.class, callback);
    }

    public Merchants deleteTrustedDevice(java.lang.String deviceId)
    {
        Object[] args = new Object[]{deviceId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "deleteTrustedDevice", args, Merchants.class );
    }

    public void deleteTrustedDeviceAsync(java.lang.String deviceId, AsyncCallback<Merchants> callback)
    {
        Object[] args = new Object[]{deviceId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "deleteTrustedDevice", args, Merchants.class, callback);
    }

    public MerchantStats getMerchantStats(java.lang.String mchntId)
    {
        Object[] args = new Object[]{mchntId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMerchantStats", args, MerchantStats.class );
    }

    public void getMerchantStatsAsync(java.lang.String mchntId, AsyncCallback<MerchantStats> callback)
    {
        Object[] args = new Object[]{mchntId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMerchantStats", args, MerchantStats.class, callback);
    }

    public java.util.List<MerchantOps> getMerchantOps(java.lang.String merchantId)
    {
        Object[] args = new Object[]{merchantId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMerchantOps", args, java.util.List.class );
    }

    public void getMerchantOpsAsync(java.lang.String merchantId, AsyncCallback<java.util.List<MerchantOps>> callback)
    {
        Object[] args = new Object[]{merchantId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMerchantOps", args, java.util.List.class, callback);
    }

    public void archiveTxns()
    {
        Object[] args = new Object[]{};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "archiveTxns", args );
    }

    public void archiveTxnsAsync(AsyncCallback<Object> callback)
    {
        Object[] args = new Object[]{};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "archiveTxns", args, Object.class, callback);
    }

    public Cashback registerCustomer(java.lang.String customerMobile, java.lang.String cardId, java.lang.String otp)
    {
        Object[] args = new Object[]{customerMobile, cardId, otp};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "registerCustomer", args, Cashback.class );
    }

    public Cashback getCashback(java.lang.String merchantId, java.lang.String merchantCbTable, java.lang.String customerId, boolean debugLogs)
    {
        Object[] args = new Object[]{merchantId, merchantCbTable, customerId, debugLogs};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getCashback", args, Cashback.class );
    }

    public void getCashbackAsync(java.lang.String merchantId, java.lang.String merchantCbTable, java.lang.String customerId, boolean debugLogs, AsyncCallback<Cashback> callback)
    {
        Object[] args = new Object[]{merchantId, merchantCbTable, customerId, debugLogs};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getCashback", args, Cashback.class, callback);
    }

    public Transaction cancelTxn(java.lang.String txnId, java.lang.String cardId, java.lang.String pin)
    {
        Object[] args = new Object[]{txnId, cardId, pin};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "cancelTxn", args, Transaction.class);
    }


}